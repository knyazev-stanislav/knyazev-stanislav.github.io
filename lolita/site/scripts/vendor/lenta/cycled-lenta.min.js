define("lenta/mixins/data-options", [], function() {
    return {
        optionsPrefix: "lenta",
        parseOptions: function() {
            var e = this,
                t = this.$el.data() || {},
                n = new RegExp("^" + this.optionsPrefix + "([a-zA-Z]+)");
            return $.each(t, function(r, i) {
                t.hasOwnProperty(r) && n.test(r) && (shortName = r.match(n)[1].replace(/[A-Z]/, function(e) {
                    return (e || "").toLowerCase()
                }), e.options[shortName] = i)
            }), this
        }
    }
}), define("lenta/slide", ["backbone", "lenta/mixins/data-options"], function(e, t) {
    var n = e.View.extend({
        options: {
            width: 0,
            height: 0,
            maxWidth: null,
            fullScreen: !1
        },
        initialize: function() {
            this.parseOptions()
        },
        isNearTo: function() {
            return !1
        },
        getOffset: function() {
            var e = {
                x: this.$el.outerWidth(!0) - this.$el.width(),
                y: this.$el.outerHeight(!0) - this.$el.height()
            };
            return e
        },
        getAspectRatio: function() {
            var e = this.options.aspectRatio;
            return e || (e = this.options.width / this.options.height), e
        },
        getOuterWidth: function() {
            return this.$el.outerWidth(!0)
        },
        getPosition: function() {
            return this.$el.position()
        },
        resize: function(e) {
            var t = 0;
            this.trigger("resize:before");
            var n = this.getOffset();
            return this.options.fullScreen == 1 ? (e = this.$el.parent().parent().height(), t = this.$el.parent().parent().width()) : (e -= n.y, t = Math.ceil(e * this.getAspectRatio()), this.options.maxWidth && this.options.maxWidth < t && (t = this.options.maxWidth)), this.$el.css({
                height: e,
                width: t
            }), this.trigger("resize:after"), this
        },
        render: function() {
            return this.trigger("render:before"), this
        }
    });
    return _.extend(n.prototype, t), n
}), define("lenta/scrollbar", ["backbone", "lenta/mixins/data-options", "jqueryui"], function(e, t) {
    var n = e.View.extend({
        slider: null,
        viewport: null,
        lenta: null,
        handler: null,
        options: {
            handlerSelector: ".lenta-scrollbar-handler",
            trackSelector: ".lenta-scrollbar-track"
        },
        initialize: function() {
            _.bindAll(this), this.lenta = this.options.lenta, this.slider = this.lenta.slider, this.viewport = this.lenta.viewport, this.handler = this.$(this.options.handlerSelector), this.track = this.$(this.options.trackSelector), this.lenta.on("moving", this.changePosition).on("resized", this.render), this.handler.draggable({
                axis: "x",
                containment: "parent",
                start: this.activateAllSlides,
                drag: this.changeContainerPosition,
                stop: this.toCenterSlide
            })
        },
        activateAllSlides: function() {
            this.lenta.activateAllSlides()
        },
        findCenterSlide: function() {
            var e = {
                    slide: null,
                    offset: null
                },
                t = this.viewport.width() / 2 + Math.abs(parseInt(this.slider.css("left")));
            return _.each(this.lenta.slides, function(n) {
                var r = n.getPosition().left + n.getOuterWidth() / 2,
                    i = Math.abs(t - r);
                if (i < e.offset || e.offset == null) e.offset = i, e.slide = n
            }), e.slide
        },
        changePosition: function(e) {
            var t = e.point / this.viewport.width() * this.handler.width();
            this.handler.animate({
                left: -1 * t
            }, this.lenta.options.transitionSpeed)
        },
        changeContainerPosition: function() {
            var e = parseInt(this.handler.css("left")),
                t = e / this.handler.width() * this.viewport.width();
            this.slider.css("left", -1 * t)
        },
        toCenterSlide: function() {
            var e = parseInt(this.handler.css("left")),
                t = null;
            e == 0 ? t = _.first(this.lenta.slides) : this.track.width() == e + this.handler.width() ? t = _.last(this.lenta.slides) : t = this.findCenterSlide(), t && this.lenta.toSlide(t.$el)
        },
        render: function() {
            var e = this.viewport.width() / this.slider.width() * this.track.width();
            return this.handler.width(e), this.slider.width() <= this.viewport.width() ? this.$el.hide() : this.$el.show(), this
        }
    });
    return n
}), define("lenta/animations/fade", ["jquery"], function(e) {
    return function(t) {
        this.animate = function() {
            var n = e.Deferred();
            return t.lenta.slider.animate({
                opacity: "0"
            }, t.lenta.options.transitionSpeed, function() {
                t.lenta.slider.css("left", t.point), t.lenta.slider.animate({
                    opacity: "1"
                }, t.lenta.options.transitionSpeed, function() {
                    n.resolve()
                })
            }), n.promise()
        }
    }
}), define("lenta/animations/none", ["jquery"], function(e) {
    return function(t) {
        this.animate = function() {
            var n = e.Deferred();
            return t.lenta.slider.css("left", t.point), n.resolve(), n.promise()
        }
    }
}), define("lenta/animations/slide", ["jquery"], function(e) {
    return function(t) {
        this.animate = function() {
            var n = e.Deferred();
            return t.lenta.slider.animate({
                left: t.point
            }, t.lenta.options.transitionSpeed, function() {
                n.resolve()
            }), n.promise()
        }
    }
}), define("lenta", ["backbone", "lenta/slide", "lenta/scrollbar", "lenta/mixins/data-options", "mousewheel", "jqueryui", "lenta/animations/fade", "lenta/animations/none", "lenta/animations/slide"], function(e, t, n, r) {
    var i = e.View.extend({
        timerMoveOnResize: null,
        options: {
            height: 0,
            scrollbarSelector: ".lenta-scrollbar",
            viewportSelector: ".lenta-viewport",
            sliderSelector: ".lenta-viewport > ul",
            slidesSelector: ".lenta-viewport > ul > li",
            prevBtnSelector: ".lenta-prev",
            nextBtnSelector: ".lenta-next",
            transitionSpeed: "fast",
            index: null,
            onMovingCssClass: "moving",
            onFocusCssClass: "focus",
            aspectRatio: null,
            align: "left",
            verticalAlign: "top",
            mousewheelTracking: !0,
            animatedResizing: !0,
            transitionAnimation: "slide"
        },
        events: {
            mousewheel: "onMousewheel"
        },
        initialize: function() {
            _.bindAll(this), this.parseOptions(), this.slides = [], this.scrollbar = null, this.slider = this.$(this.options.sliderSelector), this.prevBtn = this.$(this.options.prevBtnSelector), this.nextBtn = this.$(this.options.nextBtnSelector), this.viewport = this.$(this.options.viewportSelector), this.createSlides(), this.nextBtn.on("click", this.next), this.prevBtn.on("click", this.prev), this.$(this.options.slidesSelector).on("click", this.onSlideClick), this.on("moving", this.initControls), $(window).resize(this.onWindowResize), this.$(this.options.scrollbarSelector).length && (this.scrollbar = new n({
                el: this.$(this.options.scrollbarSelector),
                lenta: this
            }))
        },
        unbind: function() {
            return $(window).unbind("resize", this.onWindowResize), this.undelegateEvents(), this
        },
        createSlides: function() {
            return _.isFunction(this.options.createSlides) ? this.options.createSlides.apply(this) : this.$(this.options.slidesSelector).each(this.addSlide)
        },
        addSlide: function(e, t) {
            var n = this.createSlide(t);
            return this.slides.push(n), n
        },
        createSlide: function(e) {
            var n = new t({
                el: $(e)
            });
            return n
        },
        onMousewheel: function(e, t, n, r) {
            this.options.mousewheelTracking && (r > 0 ? this.prev() : this.next())
        },
        onWindowResize: function() {
            var e = this;
            this.resize(), this.options.animatedResizing ? (this.timerMoveOnResize && (clearTimeout(this.timerMoveOnResize), this.timerMoveOnResize = null), this.timerMoveOnResize = setTimeout(function() {
                e.move(e.options.index)
            }, 300)) : e.move(e.options.index, !1, !1)
        },
        getSlidesCount: function() {
            return _.filter(this.slides, function(e) {
                return e.$el.is(".disabled")
            }).length
        },
        initControls: function(e) {
            e.toIndex + 1 >= this.getSlidesCount() ? this.nextBtn.hide() : this.nextBtn.show(), e.toIndex - 1 < this.getSlidesCount() ? this.prevBtn.hide() : this.prevBtn.show()
        },
        onSlideClick: function(e) {
            var t = $(e.currentTarget),
                n = t.hasClass(this.options.onFocusCssClass);
            n || this.toSlide(t)
        },
        toSlide: function(e) {
            var t = this.$el.find(this.options.slidesSelector).index(e);
            t + 1 <= this.slides.length && t >= 0 && this.move(this.options.index = t)
        },
        prev: function(e) {
            e && e.preventDefault(), this.options.index - 1 >= 0 && this.move(this.options.index - 1)
        },
        next: function(e) {
            e && e.preventDefault(), this.options.index + 1 < this.slides.length && this.move(this.options.index + 1)
        },
        move: function(e, t, n) {
            var r = this,
                i = n === !1 ? "none" : this.options.transitionAnimation;
            if (this.$el.hasClass(this.options.onMovingCssClass)) return !1;
            var s = this.slides[e];
            if (s) {
                if (s.$el.is(".disabled")) return this.move(e + 1, !0);
                this.$el.addClass(this.options.onMovingCssClass);
                var o = t ? this.$el.width() / 2 - (this.slides[0].getOuterWidth() / 2 + this.slides[0].getPosition().left) : this.$el.width() / 2 - (s.getOuterWidth() / 2 + s.getPosition().left),
                    u = 0,
                    a = this.$el.width() - this.slider.width(),
                    f = Math.max(Math.min(u, o), a > 0 ? 0 : a),
                    l = this.findActiveSlide();
                this.trigger("moving", {
                    point: f,
                    from: l,
                    to: s,
                    toIndex: e
                });
                var c = function() {
                    r.options.index = e, r.$el.removeClass(r.options.onMovingCssClass), r.setFocus(s), r.trigger("moved", {
                        from: l,
                        to: s
                    })
                };
                require(["lenta/animations/" + i], function(e) {
                    (new e({
                        lenta: r,
                        point: f
                    })).animate().then(c)
                })
            }
        },
        getSliderPosition: function() {
            return parseInt(this.slider.css("left"))
        },
        findActiveSlide: function() {
            var e = this;
            return _.find(this.slides, function(t) {
                return t.$el.hasClass(e.options.onFocusCssClass)
            })
        },
        activateAllSlides: function() {
            this.$el.find(this.options.slidesSelector).addClass(this.options.onFocusCssClass)
        },
        deactivateAllSlides: function() {
            this.$el.find(this.options.slidesSelector).removeClass(this.options.onFocusCssClass)
        },
        setFocus: function(e) {
            this.deactivateAllSlides(), e.$el.addClass(this.options.onFocusCssClass)
        },
        calculateSize: function() {
            if (_.isFunction(this.options.calculateSize)) return this.options.calculateSize.apply(this);
            var e = null;
            if (this.options.aspectRatio) {
                var t = this.$el.parent(),
                    n = Math.min(t.width() / this.$el.width(), t.height() / this.$el.height()),
                    r = this.$el.height() * n;
                r > this.options.height && (r = this.options.height), e = {
                    width: r * this.options.aspectRatio,
                    height: r
                }
            }
            return e
        },
        resizeSlides: function() {
            var e = this,
                t = 0;
            return _.invoke(this.slides, function() {
                this.resize(e.$el.height(), e.$el.width()), t += this.getOuterWidth()
            }), t
        },
        resize: function() {
            var e = this.calculateSize();
            e && this.$el.width(e.width).height(e.height);
            var t = this.resizeSlides();
            return this.slider.width(t), this.align(), this.trigger("resized"), this
        },
        align: function() {
            if (this.options.align == "center") {
                var e = this.$el.parent().width() / 2 - this.$el.width() / 2;
                this.$el.css("left", e)
            } else if (this.options.align == "right") {
                var e = this.$el.parent().width() - this.$el.width();
                this.$el.css("left", e)
            }
            if (this.options.verticalAlign == "center") {
                var t = this.$el.parent().height() / 2 - this.$el.height() / 2;
                this.$el.css("top", t)
            } else if (this.options.verticalAlign == "bottom") {
                var t = this.$el.parent().height() - this.$el.height();
                this.$el.css("top", t)
            }
        },
        render: function() {
            return this.trigger("render:before"), this.$el.css({
                position: "relative",
                "max-height": this.options.height
            }), _.invoke(this.slides, "render"), this.resize().move(this.options.index || 0), this.trigger("render:after"), this.$el.removeClass("loading"), this
        }
    });
    return _.extend(i.prototype, r), i
}), define("cycled-lenta", ["lenta"], function(e) {
    return e.extend({
        initialize: function(e) {
            this.constructor.__super__.initialize.apply(this, [e]), this.on("moved", function(e) {
                if (this.getFakeSlides().length) {
                    var t = this.slides.length - 2;
                    e.to.$el.index() < 1 && this.move(t, !1, !1), e.to.$el.index() > t && this.move(1, !1, !1)
                }
            }).on("render:before", function() {
                this.getFakeSlides().length && (this.options.index = this.getCurrentSlideIndex())
            })
        },
        getFakeSlides: function() {
            return _.filter(this.slides, function(e) {
                return e.$el.is(".fake")
            })
        },
        getOriginSlides: function() {
            return _.filter(this.slides, function(e) {
                return !e.$el.is("fake") && !e.$el.is(".disabled")
            })
        },
        getSlidesCount: function() {
            return this.getOriginSlides().length
        },
        initControls: function(e) {
            this.getSlidesCount() <= 1 ? (this.prevBtn.hide(), this.nextBtn.hide()) : (this.nextBtn.show(), this.prevBtn.show())
        },
        getOriginSliderWidth: function() {
            var e = 0;
            return _.invoke(this.getOriginSlides(), function() {
                e += this.getOuterWidth()
            }), e
        },
        getCurrentSlideIndex: function() {
            return this.options.index
        },
        createSlides: function() {
            var e = this,
                t = this.$(this.options.slidesSelector),
                n = this.calculateSize();
            viewportWidth = n ? n.width : this.viewport.width();
            var r = this.resizeSlides();
            if (r > viewportWidth || this.options.forcedCycling) {
                var i = t[0],
                    s = $(i).clone(!0).addClass("fake");
                e.slider.append(s);
                var i = t[t.length - 1],
                    s = $(i).clone(!0).addClass("fake");
                e.slider.prepend(s)
            }
            t = this.$(this.options.slidesSelector), t.each(this.addSlide)
        }
    })
});